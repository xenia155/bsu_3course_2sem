/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>
#include <string>
#include <exception>
#include <iostream>
#include <stdexcept>
#include <limits>
#include <math.h>
#include <sstream>
#include <vector>
/* Header for class by_quantumquartet_quanthink_cmath_UtilFunctions */

#ifndef _Included_by_quantumquartet_quanthink_cmath_NativeMath_UtilFunctions
#define _Included_by_quantumquartet_quanthink_cmath_NativeMath_UtilFunctions
#ifdef __cplusplus
extern "C" {
#endif

//This is how we represent a Java exception already in progress
struct ThrownJavaException : std::runtime_error {
    ThrownJavaException() :std::runtime_error("") {}
    ThrownJavaException(const std::string& msg ) :std::runtime_error(msg) {}
};

struct NewJavaException : public ThrownJavaException{
    NewJavaException(JNIEnv * env, const char* type="", const char* message="")
        :ThrownJavaException(type+std::string(" ")+message)
    {
        jclass newExcCls = env->FindClass(type);
        if (newExcCls != NULL)
            env->ThrowNew(newExcCls, message);
        //if it is null, a NoClassDefFoundError was already thrown
    }
};

class UtilFunctions {
private:
	static double DELTA;
	static char PI;
	static char EXP;
public:
	static std::string CheckMulBrackets(std::string);
	static std::string ConvertConstToValues(std::string);
	static std::string ReduceSumSub(std::string);
	static std::string CheckFloatPoints(std::string);
	static std::string FloatRemover(std::string);
	static std::string AddOneBeforeX(std::string);
	static std::string SimplifyMul(std::string);
	static double Determinant(double**, int);
	static double** GenerateSubArray(double**, int, int);
	static bool CheckDouble(double);
	static double GetDelta();

};
#ifdef __cplusplus
}
#endif
#endif
